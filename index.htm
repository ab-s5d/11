<html lang="zh-CN">
<head>
  <meta content="width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=0" name="viewport">
  <meta content="yes" name="apple-mobile-web-app-capable">
  <meta content="yes" name="apple-touch-fullscreen">
  <meta content="black" name="apple-mobile-web-app-status-bar-style">
  <meta content="320" name="MobileOptimized">
  <title>加载中转页</title>
<style>
/* 修复：合并重复的CSS定义，避免样式覆盖 */
.container {
  width: 100px;
  height: 100px;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  animation: rotate-move 2s ease-in-out infinite;
}

.dot {
  width: 15px;
  height: 15px;
  border-radius: 50%;
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  margin: auto;
}

.dot-3 {
  background-color: #f74d75;
  animation: dot-3-move 2s ease infinite;
}

.dot-2 {
  background-color: #10beae;
  animation: dot-2-move 2s ease infinite;
}

.dot-1 {
  background-color: #ffe386;
  animation: dot-1-move 2s ease infinite;
}

@keyframes dot-3-move {
  20% { transform: scale(1) }
  45% { transform: translateY(-18px) scale(.45) }
  60% { transform: translateY(-25px) scale(.45) }
  80% { transform: translateY(-25px) scale(.45) }
  100% { transform: translateY(0px) scale(1) }
}

@keyframes dot-2-move {
  20% { transform: scale(1) }
  45% { transform: translate(-16px, 12px) scale(.45) }
  60% { transform: translate(-20px, 15px) scale(.45) }
  80% { transform: translate(-20px, 15px) scale(.45) }
  100% { transform: translateY(0px) scale(1) }
}

@keyframes dot-1-move {
  20% { transform: scale(1) }
  45% { transform: translate(16px, 12px) scale(.45) }
  60% { transform: translate(20px, 15px) scale(.45) }
  80% { transform: translate(20px, 15px) scale(.45) }
  100% { transform: translateY(0px) scale(1) }
}

@keyframes rotate-move {
  55% { transform: translate(-50%, -50%) rotate(0deg) }
  80% { transform: translate(-50%, -50%) rotate(360deg) }
  100% { transform: translate(-50%, -50%) rotate(360deg) }
}

.content {
  height: 100%;
  width: 100%;
  position: fixed;
  left: 0; /* 修复：移除负边距导致的滚动条 */
  top: 0;
  border: none; /* 移除iframe默认边框 */
  z-index: 10; /* 确保覆盖加载动画 */
}
</style>
</head>
<body>
<!-- 修复：添加id属性，确保能被JS获取 -->
<div class="container" id="container">
  <div class="dot dot-1"></div>
  <div class="dot dot-2"></div>
  <div class="dot dot-3"></div>
</div>

<script>
// 修复：添加错误捕获，处理参数异常
try {
  const urlParams = new URLSearchParams(window.location.search);
  const encodedParam = urlParams.get('c');

  // 处理参数不存在的情况
  if (!encodedParam) {
    console.error("缺少参数 'c'，无法加载目标页面");
    document.getElementById("container").innerHTML = "参数错误";
  } else {
    // 修复：变量名拼写错误（tureurl → trueurl）
    let trueurl;
    try {
      trueurl = atob(encodedParam); // 解码Base64参数
    } catch (e) {
      console.error("参数解码失败，格式不正确：", e);
      document.getElementById("container").innerHTML = "解码失败";
      return;
    }

    // 修复：更严格的URL验证（仅允许http/https协议）
    const urlRegex = /^https?:\/\/[^\s]+\.[^\s]+$/;
    if (urlRegex.test(trueurl)) {
      const container = document.getElementById("container");
      
      // 隐藏加载动画
      setTimeout(() => {
        container.style.display = "none";
      }, 500);

      // 修复：iframe的src添加引号，避免特殊字符导致错误
      const html = `<iframe class="content" onload="bindMouseWhee(this)" src="${trueurl}"></iframe>`;
      document.writeln(html);
      console.log("目标URL加载成功：", trueurl);
    } else {
      console.error("无效的URL格式，必须以http/https开头：", trueurl);
      document.getElementById("container").innerHTML = "URL无效";
    }
  }
} catch (e) {
  console.error("处理逻辑出错：", e);
  document.getElementById("container").innerHTML = "加载失败";
}
</script>

<script>
// 修复：优化鼠标滚轮事件处理
const firefox = navigator.userAgent.indexOf('Firefox') !== -1;

function handleMouseWheel(e, doc) {
  // 修复：统一阻止默认行为的方式
  if (e.preventDefault) {
    e.preventDefault();
  } else {
    e.returnValue = false;
  }

  // 修复：滚轮方向判断逻辑
  const isUp = firefox ? e.detail < 0 : e.wheelDelta > 0;
  const scrollStep = isUp ? -50 : 50;

  // 修复：兼容不同浏览器的滚动元素
  const scrollElement = doc.scrollingElement || doc.body || doc.documentElement;
  scrollElement.scrollTop += scrollStep;
}

function bindMouseWhee(iframe) {
  try {
    const doc = iframe.contentWindow.document;
    
    // 修复：使用addEventListener统一绑定，避免覆盖原有事件
    const eventName = firefox ? 'DOMMouseScroll' : 'mousewheel';
    doc.addEventListener(eventName, (e) => {
      handleMouseWheel(e, doc);
    }, { passive: false }); // 允许阻止默认行为
  } catch (e) {
    // 修复：用console代替alert，避免打断用户操作
    console.warn("跨域限制，无法控制iframe滚动：", e.message);
  }
}
</script>
</body>
</html>
